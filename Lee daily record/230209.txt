- Docker의 기능
	- 이미지 만들기(Build)
		- 이미지란?
			- 애플리케이션의 실행에 필요한 파일들이 저장된 디렉토리
			- 명령어를 사용하거나 dockerfile이라는 설정 파일을 만들어 이미지 생성 가능
			- 이미지를 겹쳐서 새로운 이미지 생성 가능(이미지 레이어로 관리)
	- 이미지 공유(Ship)
		- Docker Hub
			- docker 이미지를 공유할 수 있는 대표적 docker 레지스트리
			- GitHub과 연계도 가능하다. : GitHub에서 Dockerfile을 관리하고 이미지를 자동 생성하여 Docker Hub에서 공개 가능
	- 컨테이너 작동(Run)
		- 컨테이너
			- docker 이미지를 기반으로 실행되는 작업의 단위
			- 여러 컨테이너가 하나의 linux 커널을 공유하고 있지만 컨테이너마다 독립된 공간으로 관리되기 때문에
			서로 다른 그룹(컨테이너)에 액세스하는 것은 불가능하다.
			- 그룹마다 각각 파일 시스템, 호스트명, 네트워크 등을 할당한다.

- Docker 컴포넌트
	- Docker Engine
		- Docker의 핵심 기능으로 이미지를 생성하고 컨테이너를 기동시킨다.
	- Docker Registry
		- Docker 이미지를 공개 및 공유하는 레지스트리 기능이다. Docker Hub도 이것을 이용한다.
	- Docker Compose
		- 여러 컨테이너 구성 정보를 코드로 정의하고, 명령을 실행하여 컨테이너들을 관리하는 툴이다.
	- Docker Machine
		- 여러 환경에서 Docker 실행 환경을 자동 생성하는 툴
	- Docker Swarm
		- 컨테이너 오케스트레이션(여러 컨테이너 배포 프로세스를 최적화하는 자동화 도구).

- Docker Nginx 환경 구축
	- Docker 이미지 다운로드
		- docker pull nginx
		- docker image ls
		-
	- Nginx 작동
		- docker container run --name webserver -d -p 80:80 nginx
			- docker container run : 새 컨테이너를 생성한다
			- --name webserver : 'webserver'로 컨테이너 이름을 지정한다
			- -d : 백그라운드 detach 모드로 컨테이너 실행
			- -p 80:80 : 호스트의 80번 포트를 컨테이너의 80번 포트와 매핑
			- nginx : 컨테이너를 만들 이미지
	
		- docker container ps
			- 컨테이너 상태 확인
		- docker stop webserver / docker start webserver
			- 컨테이너 정지 / 기동

- Docker 명령어
	- docker image pull [옵션] 이미지명[:태그명]
		- 태그에는 버전을 특정 지을 수 있다.(latest로 최신 가능)
		- docker image pull -a 이미지명  // 모든 태그 취득

	- docker image ls [옵션] [리포지토리명]
		- 이미지를 표시한다.
		- 옵션 : -all/-a 모든 이미지 표시, --digests 다이제스트(docker 레지스트리 업로드 이미지 고유 식별값) 표시 여부, --no-trunc 결과 모두 표시 --quiet/-q docker 이미지 id만 표시

	- export DOCKER_CONTENT_TRUST=1   // 0일 경우 기능 off
		- 이미지 위변조를 막기 위해 DCT 기능을 이용하여 pull 명령 사용시 이미지를 검증한다
	
	- docker image inspect
		- 이미지 상세 정보 확인
		- JSON 형식으로 표시된다. --format 옵션으로 JSON 데이터 계층 구조 지정할 수 있다.
			ex) docker image inspect --format="{{.Os}}" centos:7

	- docker image tag <Docker Hub 사용자명>/이미지명: [태그명]
		- 도커 이미지에 태그를 붙인다. DockerHub에 등록하기 위해서 위의 양식을 지켜야한다.
			ex) docker image tag nginx Lee/wewbserver: 1.0
		- 이미지 id는 변경되지 않는다. 즉 이미지에 별명을 붙일 뿐이다.

	- docker search [옵션] <검색 키워드>
		- 이미지 검색 기능
		- 옵션 : --no-trunc 결과 모두 표시, --limit n건의 검색 결과를 표시, --filter=stars=n 즐겨찾기의 수(n 이상)를 지정
				
	- docker image rm [옵션] 이미지명 [이미지명]
		- 이미지 삭제 기능
		- 옵션 : --force/-f 강제 삭제, --no-prune 중간 이미지를 삭제하지 않음, 
		- 이미지명은 repository나 image id가 사용 가능하다.
		
	- docker image prune [옵션]
		- 사용하지 않은 이미지를 삭제한다. 디스크 용량 확보를 위해 정기적으로 해주자.
		- 옵션 : --all/-a 사용하지 않은 이미지 모두 삭제, --force,-f 강제 삭제

	- docker login [옵션] [서버] / docker logout [서버]
		- Docker 리포지토리에 로그인/로그아웃
		- 옵션 : --password, -p 비밀번호, --username,-u 사용자명
		- 옵션 미지정시 아이디, 비밀번호 물어본다.
	
	- docker image push <Docker Hub 사용자명>/이미지명[:태그명]
		- Docker Hub에 이미지를 올린다.

- Docker 컨테이너 생성/시작/정지
	- 컨테이너 생명주기
		- 컨테이너 생성 docker container create
			- 이미지로부터 컨테이너를 생성한다.
			- 이미지란 docker에서 기능을 작동시키기 위해 필요한 디렉토리 및 파일들이다.
			- 실행 순간 이미지에 포함될 디렉토리와 파일들의 스냅샷을 취한다.
		- 컨테이너 생성 및 시작 docker container run
			- 이미지에서 컨테이너를 생성하고 컨테이너 상에서 임의의 프로세스 시작한다.
		- 컨테이너 시작 docker container start
			- 정지 중인 컨테이너 시작에 사용
		- 컨테이너 정지 docker container stop
			- 실행중인 컨테이너 정지. 재시작시엔 restart
		- 컨테이너 삭제 docker container rm
			- 컨테이너 삭제, 먼저 정지하여야 한다.
		- 컨테이너 상태 확인 docker container ps
		- 컨테이너 일시정지 docker container pause

	- 컨테이너 생성 및 시작
		- docker container run [옵션] 이미지명[:태그명] [인수]
			- 옵션 : --attach/-a 표준 입력, 출력, 오류출력에 어태치한다, --cidfile 컨테이너 ID를 파일로 출력한다.
			 --detach/-d 컨테이너를 생성하고 백그라운드에서 실행한다. --interactive, -I 컨테이너의 표준 입력을 연다, --tty/-t 단말기 디바이스를 사용한다.
			- 대화식 실행
				- docker container run -it --name "test1" centos /bin/cal
					- docker container run : 컨테이너 생성 및 실행
					- -it : 콘솔에 결과 출력
					- --name "test1" : 컨테이너 이름
					- centos : 이미지 이름
					- /bin/cal : 컨테이너에서 실행할 명령 
		- docker container run [실행 옵션] 이미지명[:태그명] [인수]
			- 옵션 : --detach/-d 백그라운드 실행, --user/-u 사용자 명 지정, --restart=[no | on-failure | on-failure:횟수n | always | unless-stopped] 명령 실행 결과에 따라 재시작 결정,
			 --rm 명령 실행 후에 컨테이너 자동 삭제
			- 예제) docker container run -d centos /bin/ping localhost
				- docker container run : 컨테이너 생성 및 실행
				- -d : 백그라운드 실행 옵션
				- centos : 이미지명
				- /bin/ping localhost : 실행할 명령

	- 컨테이너 네트워크 설정
		- docker container run [네트워크 옵션] 이미지명[:태그명] [인수]
			- 옵션 : --add-host=[호스트명:IP 주소] 컨테이너의 /etc/hosts에 호스트명과 ip주소 정의, --dns-[IP 주소] 컨테이너용 DNS 서버의 IP 주소 지정, 
			--expose 지정한 범위의 포트 번호 할당, --mac-address=[MAC 주소] 컨테이너의 MAC 주소 지정, --net=[bridge | none | container:<name|id> | host | NETWORT] 컨테이너의 네트워크를 지정, 
			--hostname/-h 컨테이너 자신의 호스트명 지정, --publish/-p[호스트 포트 번호]:[컨테이너 포트 번호] 호스트와 컨테이너 포트 매핑, --publich-all/-P 호스트의 임의의 포트를 컨테이너에 할당
			- 예 ) docker container run -d -p 8080:80 nginx : 호스트 포트 8080과 컨테이너 80을 매핑 
				docker container run -d --dns 192.168.1.1 nginx : dns 서버 설정

	- 자원 지정하여 컨테이너 생성/실행
		- docker container run [자원 옵션] 이미지명[:태그명] [인수]
			- 옵션 : --cpu-shares/-c CPU사용 배분(기본 1024), --memory/-m 메모리 제한, --volume=[호스트 디렉토리]:[컨테이너 디렉토리]/-v 호스트와 컨테이너 디렉토리 공유
			- 예제) docker container run --cpu-shares=512 --memory=1g centos : cpu 512, memory 1g할당

	- 컨테이너 생성 환경 지정
		- docker container run [환경설정 옵션] 이미지명[:태그명] [인수]
			- 옵션 : --env=[환경변수]/-e 환경변수 설정, --env-file=[파일명] 환경변수를 파일로 설정한다, --read-only=[true|false] 컨테이너 파일 시스템을 읽기 전용으로 설정, 
			--workdir=[위치]/-w 컨테이너 작업 디렉토리 지정, -u/--user=[사용자명] 사용자명 또는 UID 지정
			- 예제) docker container run -ie -e foo=bar centos /bin/bash

	- 가동 컨테이너 목록 표시
		- docker container ls [옵션]
			- 옵션 : --all/-a 모든 컨테이너 표시, --filter/-f 표시할 컨테이너 필터링, --format 표시 포맷 설정, --last/-n 마지막으로 실행된 n건의 컨테이너 표시, --latest/ -l 마지막으로 실행된 컨테이너만 표시,
			--no-trunc 정보 생략 없이 표시, --quiet/-q 컨테이너 id만 표시, --size/-s 파일 크기 표시
			- 예) docker container ls -a -f name=test1  컨테이너 이름이 test1인 모든 파일 표시
				docker container ls -a --format "{{.Names}}: {{.Status}}" 컨테이너 ID : 상태로 표현
				docker container ls -a --format "table {{.Names}}\t{{.Status}}\t{{.Mounts}}" 표 형태로 표현
	
	- 컨테이너 가동 확인
		- docker container stats [컨테이너 id]
			- 예) docker container stats webserver : webserver라는 이름의 컨테이너 가동 상황을 확인한다.
			- 확인 후 ctrl+c로 명령 종료
			- docker container top sebserver로 webserver컨테이너에서 작동하는 프로세스 확인
	
	- 컨테이너 시작
		- docker container start [옵션] <컨테이너 id> [컨테이너 id]
			- 옵션 : --attach/-a 표준 출력, 오류 출력을 연다, --interactive/-I 컨테이너 표준 입력을 연다
			- 예) docker container start dbb4bbeof470 : 컨테이너 id로 시작. 여러 개 지정도 가능

	- 컨테이너 정지
		- docker container stop [옵션] <컨테이너 id> [컨테이너 id]
			- 옵션 : --time/-t 컨테이너 정지 시간 예약(기본 10초)
			- 예) docker container stop -t 2 dbb4bbe0f470 : 2초 후에 컨테이너 정지
			- 강제적 정지는 docker container kill 사용

	- 컨테이너 재시작
		- docker container restart [옵션] <컨테이너 id> [컨테이너 id]
			- 옵션 : --time/-t 컨테이너 정지 시간 예약(기본 10초)

	- 컨테이너 삭제
		- docker container rm [옵션] <컨테이너 id> [컨테이너 id]
			- 옵션 : --force/-f 강제로 삭제, --volumes/-v 할당한 볼륨 삭제
			- 정지 중 모든 컨테이너 삭제는 docker container prune

	- 컨테이너 중단/재개
		- docker container pause/unpause <컨테이너 id>
		- 정지는 프로세스를 모두 죽이는 반면, 중단은 프로세스를 일시정지 시킨다.
	
- Docker 컨테이너 네트워크
		
	- 네트워크 목록 표시
		- docker network ls [옵션]
			- 옵션 : -f/--filter=[] 출력을 필터링한다, --no-trunc 상세 정보를 출력, -q/--quiet 네트워크 id만 표시
			- 예) docker network ls -q --filter driver=bridge : 필터 예제. driver가 bridge인 네트워크의 id만 표시한다 

	- 네트워크 작성
		- docker network create [옵션] 네트워크
		- 옵션 : --driver/-d 네트워크 브리지 또는 오버레이, --ip-range 컨테이너에 할당하는 ip 주소 범위 지정, --subnet 서브넷을 CIDR형식으로 지정
		--ipv6 IPv6를 유효화 할지말지(true/false), -label 네트워크에 설정하는 라벨
		- 예) docker network create --driver=bridge web-network : 'web-network'라는 이름의 브리지 네트워크 작성

	- 네트워크 연결
		- docker network connect [옵션] 네트워크 컨테이너
		- 옵션 : --ip IPv4 주소, --ip6 IPv6 주소, --alias 앨리어스명, --link 다른 컨테이너 링크
		- Docker를 run 할 때 docker container run --net=web-network nginx로 처음부터 web-network라는 네트워크에 연결하며 실행할 수 있다.
		- 연결 해제 : disconnect	
			
	- 네트워크 상세 정보 확인
		- docker network inspect [옵션] 네트워크
	
	- 네트워크 삭제
		- docker network rm [옵션] 네트워크

- 가동 중인 Docker 컨테이너 조작
	
	- 가동 컨테이너 연결
		- docker container attach

	- 가동 컨테이너에서 프로세스 실행
		- docker container exec [옵션] <컨테이너 식별자> <실행할 명령> [인수]
		- 옵션 : --detach/-d 명령을 백그라운드에서 실행, --interactive/-i 컨테이너 표준 입력을 연다, --tty, -t 단말 디바이스를 사용한다, --user, -u 사용자 명을 지정한다.
		- 예제) docker container exec -it webserver /bin/echo "Hello world" : webserver 컨테이너에서 /bin/echo를 실행하며 그 인수는 "Hello world"이다.

	- 가동 컨테이너의 프로세스 확인
		- docker comtainer top [컨테이너 이름|컨테이너 id]
		
	- 가동 컨테이너의 포트 전송 확인
		- docker container port [컨테이너 이름|컨테이너 id]

	- 컨테이너 이름 변경
		- docker container rename 현재 이름 변경할 이름 

	- 컨테이너 안의 파일을 복사
		- docker container cp <컨테이너 식별자>:<컨테이너 안의 파일 경로> <호스트의 디렉토리 경로>  : 컨테이너 -> 호스트 파일 복사
		- docker container cp <호스트의 파일> <컨테이너 식별자>:<컨테이너 안의 파일 경로> -> 컨테이너 파일 복사

	- 컨테이너가 생성시로부터 달라진 점 확인
		- docker container diff <컨테이너 식별자>

- Docker 이미지 생성
		
	- 컨테이너로부터 이미지 작성
		- docker container commit [옵션] <컨테이너 식별자> [이미지명[:태그명]]
		- 옵션 : --author/-a 작성자 지정, --message/-m 메세지 지정, --change/-c 커밋 시 Dockerfile 명령 지정, --pause/-p 컨테이너 일시 정지 후 커밋

	- 컨테이너 tar 파일로 출력
		- docker container export <컨테이너 식별자>
		- 예) docker container export webserver > latest.tar : webserver 컨테이너를 latest.tar로 출력

	- tar 파일로부터 이미지 작성
		- docker image import <파일 또는 URL> | - [이미지명[:태그명]]
	
	- 이미지 저장
		- docker image save [옵션] <저장 파일명> [이미지명]

	- 이미지 로드
		- docker image load [옵션] <파일명>

	- import/export vs save/load
		- save의 경우 이미지 레이어 구조도 포함된 형태로 압축.

	- 불필요한 이미지/컨테이너 일괄 삭제
		- docker system prune [옵션]
		- 옵션 : --all/-a 사용하지 않는 리소스 모두 삭제, --force/-f 강제 삭제


#Dockerfile

- Dockerfile을 이용한 구성 관리
	
	- Dockerfile이란?
		- docker 상에서 작동시킬 커넽이너 구성 정보를 기술하기 위한 파일.
		- docker build로 dockerfile의 내용을 docker 이미지로 작성한다. 

	- Dockerfile 작성
		- FROM [이미지명]  / FROM [이미지명]:[태그명] / FROM [이미지명]@[다이제스트]     미작성시 latest태그로 생성
		- 베이스 이미지를 설정하는 것